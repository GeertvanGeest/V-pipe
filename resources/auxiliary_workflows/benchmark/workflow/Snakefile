import pandas as pd

from snakemake.utils import Paramspace


# setup config
configfile: "config/config.yaml"


# setup paramspace
df_params = pd.read_csv("config/params.csv")
paramspace = Paramspace(df_params, filename_params="*")

# method selection
if config["method_list"] is None:
    (method_list,) = glob_wildcards("resources/method_definitions/{method}.py")
else:
    method_list = config["method_list"]

print(method_list)


# rule definitions
rule all:
    input:
        "results/performance_measures/",


rule simulate_reads:
    output:
        fname_fastq=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/reads.fastq",
        fname_bam=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/reads.bam",
        fname_reference=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/reference.fasta",
        fname_groundtruth=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/ground_truth.csv",
        dname_work=directory(
            f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/work/"
        ),
    params:
        params=paramspace.instance,
    conda:
        "envs/simulate_reads.yaml"
    script:
        "scripts/simulate_reads.py"


rule run_method:
    input:
        script="resources/method_definitions/{method}.py",
        fname_bam=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/reads.bam",
        fname_reference=f"results/simulated_reads/{paramspace.wildcard_pattern}/replicates/{{replicate}}/reference.fasta",
    output:
        fname_results=f"results/method_runs/{paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/snvs.vcf",
        dname_work=directory(
            f"results/method_runs/{paramspace.wildcard_pattern}/{{method}}/replicates/{{replicate}}/work/"
        ),
    params:
        script_name=lambda wildcards, input: "../" + input.script,
    conda:
        "envs/run_method.yaml"
    script:
        "{params.script_name}"


rule performance_measures:
    input:
        vcf_list=[
            f"results/method_runs/{params}/{method}/replicates/{replicate}/snvs.vcf"
            for params in paramspace.instance_patterns
            for method in method_list
            for replicate in range(config["replicate_count"])
        ],
        # we also include `method_list` to align with `vcf_list`
        groundtruth_list=[
            f"results/simulated_reads/{params}/replicates/{replicate}/ground_truth.csv"
            for params in paramspace.instance_patterns
            for method in method_list
            for replicate in range(config["replicate_count"])
        ],
    output:
        dname_out=directory("results/performance_measures/"),
    conda:
        "envs/performance_measures.yaml"
    script:
        "scripts/performance_measures.py"
